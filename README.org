#+title: You and me, Zyre. üç†

/yamz/ provides flexible mechanisms to manage sockets within and
automatically form linkages between sockets of advanced,
multi-threaded applications.

* Gestalt

/yamz/ 

- provides ready-to-use socket configuration mechanism while still
  allowing application-determined configuration.

- allows disparate, possibly dynamically-loaded components to present
  a unified advertisement of socket configuration to a discovery
  network (currently Zyre but extension to others is possible).

- provides a simple and general abstract address query mechanism to
  find appropriate peer sockets to connect.

- allows socket using code to be notified when interesting peers
  become seen on or leave the discovery network.

* Architecture

/yamz/ is used by an application through one or more instances of the
/yamz/ client.  Through the /yamz/ client, the application may construct a
number of ZeroMQ sockets.  The sockets are held by the client and the
application may use them via a thin handler called a /port/.

The /yamz/ client may operate in three /modes/:

- direct :: standard ZeroMQ addresses may be used and network
  discovery is not engaged.
- selfserv :: the client creates its own /yamz/ server.
- extserver :: the client relies on an existing /yamz/ server possibly
  shared by other /yamz/ clients.

The /yamz/ server provides a /discovery entity/ (eg a Zyre "node" or
"peer") and mediates between the discovery mechanism and its clients.
A client will make a single request of its server and the server will
asynchronously send replies to its clients as network conditions
determine.

* Discovery

The Zyre network is currently the only discovery mechanism that /yamz/
supports.  In principle, an alternative /yamz/ server may be developed
which participates in another discovery mechanism and /yamz/ clients
need not change.

An example /yamz/ discovery sequence shown in
[[file:docs/yamz-sequence.pdf]].  Briefly:

1. application (~extserver~ mode) or client (~selfserve~ mode) constructs /yamz/ server
2. application constructs /yamz/ client
3. client receives /bind/ and /connect/ addresses via configuration or explicit application calls
4. all /bind/ calls are performed and ephemeral /bind/ addresses are resolved
5. clients make their individual request consisting of /bind/ addresses and /connect/ addresses (abstract for matching or concrete)
6. server is explicitly brought "online" by application or through an automatic online criteria being met (all expected clients connected)
7. server enters the discovery network with information about its /bind/ addresses
8. the /yamz/ server receives notice from another /yamz/ server peer and matches its /connect/ patterns to the peers /bind/ addresses
9. matched addresses are sent as reply to appropriate /yamz/ client
10. application will periodically /poll/ its client(s)
11. in a /poll/ the /yamz/ client will process any queued replies and apply any /connect/ address to the appropriate socket

Throughout this process the application may decide to wait for
expected linkage or if applicable, simply begin using its sockets as
they will become linked automatically by the /yamz/ client.

* Address matching

~yamz://~ explained


* Installation

** Development

#+begin_example
git subrepo push wafit
#+end_example

* Example code

  
